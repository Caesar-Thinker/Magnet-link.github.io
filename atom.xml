<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lydia Lee</title>
  
  <subtitle>On the way to</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Yaer23.github.io/"/>
  <updated>2017-10-28T12:27:11.497Z</updated>
  <id>http://Yaer23.github.io/</id>
  
  <author>
    <name>Lydia Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>css布局总结笔记</title>
    <link href="http://Yaer23.github.io/2017/10/28/css%E5%B8%83%E5%B1%80%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B0/"/>
    <id>http://Yaer23.github.io/2017/10/28/css布局总结笔记/</id>
    <published>2017-10-28T12:25:04.000Z</published>
    <updated>2017-10-28T12:27:11.497Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS布局总结"><a href="#CSS布局总结" class="headerlink" title="CSS布局总结"></a>CSS布局总结</h1><p>###写在前面<br>  最近总结了一下css布局方面的知识，也做了相应的练习，查了些资料，当然也可能有很多地方没有考虑到，想的是在学习过程中不断更新这篇博文，博文在写的过程中也掺杂了一点自己的理解，若有错误或者不恰当的地方，烦请指教。</p><a id="more"></a> <h2 id="绝对定位与浮动"><a href="#绝对定位与浮动" class="headerlink" title="绝对定位与浮动"></a>绝对定位与浮动</h2><h3 id="绝对定位与浮动都会“block”化元素"><a href="#绝对定位与浮动都会“block”化元素" class="headerlink" title="绝对定位与浮动都会“block”化元素"></a>绝对定位与浮动都会“block”化元素</h3><ul><li>绝对定位：绝对定位后的元素生成一个块级框，而不论原来它在正常流中生成何种类型的框。（css绝对定位）</li><li>浮动：“block”化元素是指：行内元素在设置浮动后，会拥有块级元素的部分特性，可以设置高宽等，其实质上还是行内元素。<h3 id="脱离文档流"><a href="#脱离文档流" class="headerlink" title="脱离文档流"></a>脱离文档流</h3></li><li>使用float脱离文档流时，其他盒子会无视这个元素，但其他盒子内的文本依然会为这个元素让出位置，环绕在周围，可实现文字环绕图片的效果。</li><li><p>使用absolute positioning脱离文档流的元素，其他盒子与其他盒子内的文本都会无视它。</p><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><p>元素脱离文档流后可能导致父容器塌陷，这个时候需要清除浮动避免塌陷。</p></li><li><p>clearfix清除浮动</p></li><li><p>overflow:hidden清除浮动(父容器溢出隐藏)</p><h2 id="圣杯与双飞翼（三栏式布局）"><a href="#圣杯与双飞翼（三栏式布局）" class="headerlink" title="圣杯与双飞翼（三栏式布局）"></a>圣杯与双飞翼（三栏式布局）</h2><h5 id="圣杯与双飞翼是在做IFE百度前端小薇学院的三栏式布局的时候了解到的，通过尝试不同种布局，查阅了一些资料后，发现这个题比较好的解决方法就是圣杯布局。"><a href="#圣杯与双飞翼是在做IFE百度前端小薇学院的三栏式布局的时候了解到的，通过尝试不同种布局，查阅了一些资料后，发现这个题比较好的解决方法就是圣杯布局。" class="headerlink" title="圣杯与双飞翼是在做IFE百度前端小薇学院的三栏式布局的时候了解到的，通过尝试不同种布局，查阅了一些资料后，发现这个题比较好的解决方法就是圣杯布局。"></a>圣杯与双飞翼是在做IFE百度前端小薇学院的三栏式布局的时候了解到的，通过尝试不同种布局，查阅了一些资料后，发现这个题比较好的解决方法就是圣杯布局。</h5></li><li><p>目的：两边定宽中间自适应</p></li><li>中心思想：<ul><li>中间栏宽度设为100%独占一行</li><li>为左右栏的“拉升”腾出空间（实现圣杯与双飞翼的不同之处）</li><li>用margin-left负值将左右栏分别拉升回与中间栏同一高度的左右两边</li></ul></li><li>需要注意的地方<ul><li>对中间栏进行优先渲染</li><li>圣杯基本布局之后需要做一些适当的调整实现具体布局要求，比如相对定位左右栏的位置进行优化</li><li>在使用布局的时候要考虑盒子的border属性，必要时用到box-sizing:border-box；</li></ul></li></ul><h3 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h3><p>注：图片来自<a href="http://ife.baidu.com/course/detail/id/94" target="_blank" rel="external">IFE百度前端小薇学院三栏式布局</a></p><p><img src="http://oofwms1or.bkt.clouddn.com/%E4%B8%89%E6%A0%8F%E5%BC%8F%E5%B8%83%E5%B1%80.png" alt="三栏式布局"></p><h3 id="圣杯布局的具体实现："><a href="#圣杯布局的具体实现：" class="headerlink" title="圣杯布局的具体实现："></a>圣杯布局的具体实现：</h3><ul><li>中间栏宽度设为100%独占一行</li><li><strong>设置父容器的左右padding值</strong>为左右栏的“拉升”腾出空间</li><li>用margin-left负值将左右栏分别拉升回与中间栏同一水平高度的左右两边</li><li>使用相对定位设置左右栏的位置</li></ul><p>注：代码只截取了重要部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/*这是html代码*/</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"center"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>第一步：给中间栏设置宽度为100%，并设置父容器的左右padding值。给三栏加上浮动，并清除浮动使得父容器高度不塌陷<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*这是最初的css样式（截取了关键部分）*/</span></div><div class="line"></div><div class="line"><span class="selector-id">#container</span> &#123;</div><div class="line">    <span class="attribute">padding-left</span>: <span class="number">240px</span>;        <span class="comment">/* 左栏宽度+两倍padding值 */</span></div><div class="line">    <span class="attribute">padding-right</span>: <span class="number">160px</span>;       <span class="comment">/* 右栏宽度+两倍padding值 */</span></div><div class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#container</span> <span class="selector-class">.column</span>&#123;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#container</span><span class="selector-pseudo">::after</span>&#123;      <span class="comment">/* 防止父容器高度塌陷 */</span></div><div class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">clear</span>: both;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#center</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;        <span class="comment">/* 中间栏宽度设为100% */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-id">#left</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;       <span class="comment">/* 左栏宽度固定 */</span>  </div><div class="line">&#125;</div><div class="line"><span class="selector-id">#right</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">120px</span>;       <span class="comment">/* 右栏宽度固定 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>效果如下：<br><img src="http://oofwms1or.bkt.clouddn.com/padding+float.png" alt="float+padding"></p><p>第二步：将左右栏分别拉升到与中间栏同一水平高度<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#left</span>&#123;</div><div class="line">    <span class="attribute">margin-left</span>: -<span class="number">100%</span>;         <span class="comment">/* 负的100% */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-id">#right</span>&#123;</div><div class="line">    <span class="attribute">margin-right</span>: -<span class="number">120px</span>;       <span class="comment">/* 负的右栏宽 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>效果如下：<br><img src="http://oofwms1or.bkt.clouddn.com/margin-left.png" alt="拉升左右栏"></p><p>第三步：使用相对定位设置左右栏的位置<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#container</span> <span class="selector-class">.column</span>&#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#left</span>&#123;</div><div class="line">    <span class="attribute">right</span>:<span class="number">220px</span>;    <span class="comment">/* 左栏向左平移到适当位置 */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-id">#right</span>&#123;</div><div class="line">    <span class="attribute">left</span>:<span class="number">20px</span>;      <span class="comment">/* 右栏向右平移到适当位置 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>效果如下：<br><img src="http://oofwms1or.bkt.clouddn.com/relative.png" alt="圣杯"></p><p>基本上三栏式布局就完成啦~ 再设置一些内外边距值就可以达到效果Demo</p><h3 id="双飞翼的具体实现："><a href="#双飞翼的具体实现：" class="headerlink" title="双飞翼的具体实现："></a>双飞翼的具体实现：</h3><p>与圣杯的相同之处不再赘述，不同点在于：</p><ul><li><strong>给中间栏再设置一个div，给div设置左右margin值</strong>为左右栏的“拉升”腾出空间</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/*这是html代码*/</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"center"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>       /* 添加的div */</div><div class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#wrap</span>&#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">220px</span>;         <span class="comment">/* 腾出左边部分 */</span></div><div class="line">    <span class="attribute">margin-right</span>: <span class="number">140px</span>;        <span class="comment">/* 腾出右边部分 */</span></div><div class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>实现效果：<br><img src="http://oofwms1or.bkt.clouddn.com/shuangfeiyi.png" alt="双飞翼"><br>双飞翼的缺点在于中间栏的高度只适应新添加的div的高度，当左右栏高度超出中间的高度，就会有上图的情况出现，而圣杯布局可以适应三栏中任意最高的高度。</p><h2 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h2><h3 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h3><ul><li>text-align:center;只能适用于行内元素,块状元素可以通过改变元素的display属性（display:inline-block或者display:inline）</li><li>固定宽度的块状元素设置margin:0 auto;使其居中显示<h3 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h3></li><li>单行行内元素，设置行高（line-height）与height一致</li><li>多行行内元素或者文字与图片一行用vertical-align:center;</li><li>块状元素，父元素相对布局，子元素绝对定位（top:50%），再设置偏移（margin-top:子元素高度的一半）</li><li>若子元素高度未知，将margin改为transform:translateY(-50%);<h3 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h3></li><li>跟块状元素垂直居中的思路一样，父元素相对布局，子元素绝对定位（top:50%;left:50%;）,再设置偏移量（margin-top:子元素高度的一半;margin-left:子元素宽度的一半）</li><li>子元素高度未知，将两个margin改为transform:translate(-50%,-50%);</li></ul><p>注意：transform是css3的内容，需要考虑兼容性</p><h2 id="负margin"><a href="#负margin" class="headerlink" title="负margin"></a>负margin</h2><p>边学边总结。。</p><h2 id="Flexbox布局"><a href="#Flexbox布局" class="headerlink" title="Flexbox布局"></a>Flexbox布局</h2><h2 id="grid"><a href="#grid" class="headerlink" title="grid"></a>grid</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS布局总结&quot;&gt;&lt;a href=&quot;#CSS布局总结&quot; class=&quot;headerlink&quot; title=&quot;CSS布局总结&quot;&gt;&lt;/a&gt;CSS布局总结&lt;/h1&gt;&lt;p&gt;###写在前面&lt;br&gt;  最近总结了一下css布局方面的知识，也做了相应的练习，查了些资料，当然也可能有很多地方没有考虑到，想的是在学习过程中不断更新这篇博文，博文在写的过程中也掺杂了一点自己的理解，若有错误或者不恰当的地方，烦请指教。&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="http://Yaer23.github.io/categories/css/"/>
    
    
      <category term="css" scheme="http://Yaer23.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>宫崎骏电影</title>
    <link href="http://Yaer23.github.io/2017/06/11/%E5%AE%AB%E5%B4%8E%E9%AA%8F%E7%94%B5%E5%BD%B1/"/>
    <id>http://Yaer23.github.io/2017/06/11/宫崎骏电影/</id>
    <published>2017-06-11T12:52:30.000Z</published>
    <updated>2017-09-01T08:34:07.116Z</updated>
    
    <content type="html"><![CDATA[<p>很喜欢宫崎骏的作品 虽然没有全部看完 但是基本上看过的都是看了很多遍<br>大学之前一直都最喜欢千与千寻 现在觉得哈尔的移动城堡更喜欢一些<br>了了说年纪小一点的孩子会比较喜欢千与千寻一些 年纪大一点的朋友可能更喜欢哈尔 啊哈 我就是这样的<br>排了个位（其实都差不多的喜欢 也很难抉择呀）<br>大概就是这样的吧<br><a id="more"></a><br>No.1   <strong>哈尔的移动城堡</strong><br>哈尔的配音是木村拓哉哈哈哈  很喜欢<a href="http://music.163.com/#/song?id=441441" target="_blank" rel="external">人生のメリーゴーランド </a>这首歌啊~</p><p><img src="http://oofwms1or.bkt.clouddn.com/%E5%93%88%E5%B0%94%E7%9A%84%E7%A7%BB%E5%8A%A8%E5%9F%8E%E5%A0%A1.jpg" alt="哈尔的移动城堡"></p><p>No.2   <strong>千与千寻</strong><br>反正就是经典<br><img src="http://oofwms1or.bkt.clouddn.com/%E5%8D%83%E4%B8%8E%E5%8D%83%E5%AF%BB.jpg" alt="千与千寻"></p><p>No.3   <strong>侧耳倾听</strong><br>Country Road<a href="http://music.163.com/#/song?id=27676373" target="_blank" rel="external">カントリー・ロード</a><br><img src="http://oofwms1or.bkt.clouddn.com/%E4%BE%A7%E8%80%B3%E5%80%BE%E5%90%AC.jpg" alt="侧耳倾听"></p><p>No.4   <strong>龙猫</strong><br><img src="http://oofwms1or.bkt.clouddn.com/%E9%BE%99%E7%8C%AB.jpg" alt=" 龙猫| 400*500"></p><p>No.5   <strong>魔女宅急便</strong><br><img src="http://oofwms1or.bkt.clouddn.com/%E9%AD%94%E5%A5%B3%E5%AE%85%E6%80%A5%E4%BE%BF.jpg" alt="魔女宅急便| 400*500"></p><p>No.6   <strong>悬崖上的金鱼姬</strong><br><img src="http://oofwms1or.bkt.clouddn.com/%E6%82%AC%E5%B4%96%E4%B8%8A%E7%9A%84%E9%87%91%E9%B1%BC%E5%A7%AC.jpg" alt="悬崖上的金鱼姬| 400*500"></p><p>No.7  <strong>天空之城</strong><br><img src="http://oofwms1or.bkt.clouddn.com/%E5%A4%A9%E7%A9%BA%E4%B9%8B%E5%9F%8E.jpg" alt="天空之城| 400*500"></p><p>No.8 <strong>借东西的小人阿莉埃蒂</strong><br><img src="http://oofwms1or.bkt.clouddn.com/%E5%80%9F%E4%B8%9C%E8%A5%BF%E7%9A%84%E5%B0%8F%E4%BA%BA.jpg" alt="借东西的小人阿莉埃蒂| 400*500"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很喜欢宫崎骏的作品 虽然没有全部看完 但是基本上看过的都是看了很多遍&lt;br&gt;大学之前一直都最喜欢千与千寻 现在觉得哈尔的移动城堡更喜欢一些&lt;br&gt;了了说年纪小一点的孩子会比较喜欢千与千寻一些 年纪大一点的朋友可能更喜欢哈尔 啊哈 我就是这样的&lt;br&gt;排了个位（其实都差不多的喜欢 也很难抉择呀）&lt;br&gt;大概就是这样的吧&lt;br&gt;
    
    </summary>
    
      <category term="life" scheme="http://Yaer23.github.io/categories/life/"/>
    
      <category term="电影" scheme="http://Yaer23.github.io/categories/life/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="life" scheme="http://Yaer23.github.io/tags/life/"/>
    
      <category term="宫崎骏" scheme="http://Yaer23.github.io/tags/%E5%AE%AB%E5%B4%8E%E9%AA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Github+Hexo搭建个人博客（Windows篇）</title>
    <link href="http://Yaer23.github.io/2017/05/05/Github%E2%80%94-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88Windows%E7%AF%87%EF%BC%89/"/>
    <id>http://Yaer23.github.io/2017/05/05/Github—-Hexo搭建个人博客（Windows篇）/</id>
    <published>2017-05-05T13:47:04.000Z</published>
    <updated>2017-09-01T08:34:01.471Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo-Github搭建个人博客教程基础篇（Windows篇）"><a href="#Hexo-Github搭建个人博客教程基础篇（Windows篇）" class="headerlink" title="Hexo+Github搭建个人博客教程基础篇（Windows篇）"></a>Hexo+Github搭建个人博客教程基础篇（Windows篇）</h2><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>刚开始接触网页设计的时候就想着要建立一个自己的网站但一直都没有开始行动，前段时间刚接触到Hexo的时候就觉得非常的方便，然后开始查找这方面的资料，就当是一次学习的总结吧。<br>网上有很多关于Hexo搭建网站的教程，很多都是前几年的，博主在搭建网站的时候也遇到了很多的坑，此文章是为了记录建博客时采取的一些操作以及引用的文档和教程资料，主要参考Hexo和Next官方文档，博主会对其中的一些我认为值得注意和学习的地方进行解释说明，希望能与大家一同分享<strong>^ ^</strong>。<br>文章若有不恰当的地方手动点击右方侧栏联系方式，<strong>请多指教  <strong>(:зゝ∠)</strong></strong>。</p><a id="more"></a> <h3 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h3><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><ul><li><strong>安装git、node.js</strong><br>  直接在官网上下载最新版本<br>  <a href="https://git-scm.com/" target="_blank" rel="external">git官网</a><br>  <a href="https://nodejs.org/en/" target="_blank" rel="external">node.js官网</a></li><li><strong>检验安装是否成功</strong><br>  安装完成之后，在你认为合适的地方新建一个文件夹（博主直接建在桌面的），命名为Hexo。<br>  右击Hexo文件夹，点击Git Bush Here进入分别输入git –version、node -v、npm -v如下：<br><img src="http://oofwms1or.bkt.clouddn.com/version.png" alt="hhh"></li><li><strong>申请github账号</strong><br>  进入<a href="https://github.com" target="_blank" rel="external">Github官网</a>，注册账号<br><img src="http://oofwms1or.bkt.clouddn.com/github.png" alt="G"><br>  建立一个 repository<br><img src="http://oofwms1or.bkt.clouddn.com/resository.png" alt="repository"></li></ul><p><strong>注意创建与账号同名的Repository并且勾选Initialize this repository with a README</strong></p><p>创建成功后点击Settings可以看到：<br><img src="http://oofwms1or.bkt.clouddn.com/GHpage.png" alt="GHpages"><br>至此，我的网站域名为<a href="https://Yaer23.github.io">https://yaer23.github.io</a></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul><li><strong>安装Hexo</strong><br>  我是使用<a href="https://npm.taobao.org/" target="_blank" rel="external">淘宝NPM镜像</a>完成对Hexo的安装的<br>  打开Git Bash，输入以下命令<br>  <code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code><br>  使用NPM镜像安装，输入以下命令<br>  <code>cnpm install -g hexo-cli</code><br>  如果出现WARM不用理会，继续输入命令<br>  <code>cnpm install hexo --save</code><br>  检验安装是否成功<br>  <code>hexo -v</code><br>  看到显示的hexo版本如下（我的版本）说明安装成功啦（// v //）<br><img src="http://oofwms1or.bkt.clouddn.com/hexoVersion.png" alt="hexoVersion"></li></ul><ul><li><strong>Hexo本地运行</strong><br>  hexo初始化<br>  <code>hexo init</code><br>  安装生成器<br>  <code>cnpm install</code><br>  运行hexo，输入命令<br>  <code>hexo s -g</code><br>  可以看到<br><img src="http://oofwms1or.bkt.clouddn.com/localhost.png" alt="localhost"><br>在浏览器中输入<a href="http://localhost:4000就可以看到Hexo的本地运行了" target="_blank" rel="external">http://localhost:4000就可以看到Hexo的本地运行了</a><br><img src="http://oofwms1or.bkt.clouddn.com/local.png" alt="localhost"></li></ul><p><em>Ctrl+C可以停止运行</em></p><h3 id="将博客部署到github上"><a href="#将博客部署到github上" class="headerlink" title="将博客部署到github上"></a>将博客部署到github上</h3><h4 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h4><h4 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h4><ul><li><strong>生成SSH</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot;</div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车&gt;</div></pre></td></tr></table></figure></li></ul><p>然后系统会要你输入密码(这里的密码主要是在你提交Git时弹出密码认证)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;</div><div class="line">Enter same passphrase again:&lt;再次输入加密串&gt;</div></pre></td></tr></table></figure></p><p>成功后会出现如下图：<br><img src="http://oofwms1or.bkt.clouddn.com/ssh.png" alt="ssh"></p><ul><li><strong>更改Github账号SSH信息</strong><br>找到<code>~/.ssh/id_rsa.pub</code>文件并复制里面的内容<br>登录Github并添加密钥，将复制的内容添加到SSH Key中</li><li><p><strong>测试SSH是否配置成功</strong><br>输入<code>ssh -T git@github.com</code><br>系统回复以下说明配置成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Hi username! You&apos;ve successfully authenticated, but GitHub does not</div><div class="line">provide shell access.</div></pre></td></tr></table></figure></li><li><p><strong>配置github用户信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name your name</div><div class="line">git config --global user.email your_email@youremail.com</div></pre></td></tr></table></figure></li><li><p><strong>部署到Github</strong><br>安装hexo git插件<br><code>cnpm install hexo-deployer-git --save</code><br>打开根目录配置文件(~/_config.yml)，<strong>修改</strong>部署配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo:</div><div class="line">    github: git@github.com:Yaer23/Yaer23.github.io.git,master</div></pre></td></tr></table></figure></li><li><p><strong>最后发布并更新博客</strong><br><code>hexo g</code><br><code>hexo d</code><br>然后打开<a href="https://Yaer23.github.io可以看到有Hexo主题的个人博客" target="_blank" rel="external">https://Yaer23.github.io可以看到有Hexo主题的个人博客</a><br>至此，简单的个人博客就部署成功 ٩(๑❛ᴗ❛๑)۶</p><h3 id="编辑并发表文章"><a href="#编辑并发表文章" class="headerlink" title="编辑并发表文章"></a>编辑并发表文章</h3><h4 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h4><p><code>hexo new &quot;title&quot;</code><br>其中title为你的文章命名</p><h4 id="编辑文章"><a href="#编辑文章" class="headerlink" title="编辑文章"></a>编辑文章</h4><p>打开新建的文章\source_posts\postName.md，其中postName是hexo new “title”中的title</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: My first one  # 文章页面上的显示名称，可以任意修改，不会出现在URL中</div><div class="line">date: 2017-4-12 17:34:29  # 文章生成时间，一般不改</div><div class="line">categories: diary  # 文章分类目录，多个分类使用[a,b,c]这种格式</div><div class="line">tags: [Hexo,diary]  # 文章标签</div><div class="line">---</div><div class="line">#这里开始使用markdown格式输入你的正文。</div><div class="line">&lt;!--more--&gt; </div><div class="line">#more标签以下的内容要点击“阅读全文”才能看见，#more标签以上的内容为你首页显示文章的摘要部分</div></pre></td></tr></table></figure></li></ul><h4 id="MD渲染文章"><a href="#MD渲染文章" class="headerlink" title="MD渲染文章"></a>MD渲染文章</h4><p><a href="http://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="external">Markdown</a>是一种轻量级的「标记语言」，好处很多，balabala…（自行Google）<br>博主是直接用的<a href="https://maxiang.io" target="_blank" rel="external">马克飞象</a>来写博文的</p><h3 id="相关git命令"><a href="#相关git命令" class="headerlink" title="相关git命令"></a>相关git命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">hexo g # 等于hexo generate # 生成静态文件</div><div class="line">hexo s # 等于hexo server # 本地预览</div><div class="line">hexo d # 等于hexo deploy # 部署，可与hexo g合并为 hexo d -g</div><div class="line">hexo new [tittle] # 新建一篇文章</div><div class="line">hexo version # 查看版本</div><div class="line">hexo clean # 清除缓存文件和已生成的静态文件</div></pre></td></tr></table></figure><h3 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h3><p>由于博主没有购买域名，这部分可以自行谷歌。</p><h3 id="相关文档教程链接"><a href="#相关文档教程链接" class="headerlink" title="相关文档教程链接"></a>相关文档教程链接</h3><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>balabala…</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hexo-Github搭建个人博客教程基础篇（Windows篇）&quot;&gt;&lt;a href=&quot;#Hexo-Github搭建个人博客教程基础篇（Windows篇）&quot; class=&quot;headerlink&quot; title=&quot;Hexo+Github搭建个人博客教程基础篇（Windows篇）&quot;&gt;&lt;/a&gt;Hexo+Github搭建个人博客教程基础篇（Windows篇）&lt;/h2&gt;&lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;刚开始接触网页设计的时候就想着要建立一个自己的网站但一直都没有开始行动，前段时间刚接触到Hexo的时候就觉得非常的方便，然后开始查找这方面的资料，就当是一次学习的总结吧。&lt;br&gt;网上有很多关于Hexo搭建网站的教程，很多都是前几年的，博主在搭建网站的时候也遇到了很多的坑，此文章是为了记录建博客时采取的一些操作以及引用的文档和教程资料，主要参考Hexo和Next官方文档，博主会对其中的一些我认为值得注意和学习的地方进行解释说明，希望能与大家一同分享&lt;strong&gt;^ ^&lt;/strong&gt;。&lt;br&gt;文章若有不恰当的地方手动点击右方侧栏联系方式，&lt;strong&gt;请多指教  &lt;strong&gt;(:зゝ∠)&lt;/strong&gt;&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://Yaer23.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://Yaer23.github.io/tags/Hexo/"/>
    
      <category term="study" scheme="http://Yaer23.github.io/tags/study/"/>
    
  </entry>
  
</feed>
